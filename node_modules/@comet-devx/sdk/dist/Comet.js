"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Comet = void 0;
const ethers_1 = require("ethers");
const networks_1 = require("./config/networks");
const CometInterface = require("./abis/CometInterface.json");
class Comet {
    constructor(network, signerOrProvider) {
        const { cometProxyAddress } = networks_1.NETWORKS[network];
        this.contract = new ethers_1.ethers.Contract(cometProxyAddress, CometInterface, signerOrProvider);
    }
    sampleMethod() {
        return "MVP placeholder";
    }
    /**
   * Supply an asset into Comet
   * @param asset - the ERC20 token address being supplied
   * @param amount - the raw amount (in smallest units) to supply
   * @returns a TransactionResponse from ethers
   */
    async supply(asset, amount) {
        // In a real scenario, the user must have already "approved" the Comet contract
        // to pull tokens from their wallet. We assume thatâ€™s handled externally.
        return this.contract.supply(asset, amount);
    }
    /**
* Borrow the base asset from Comet by calling `withdraw(baseAsset, amount)`.
* You must have enough collateral to safely do this.
* @param amount - The raw amount of base asset to borrow (e.g. USDC in smallest units)
* @returns TransactionResponse
*/
    async borrow(amount) {
        // get the base token address from Comet
        // const baseAsset: string = await this.contract.baseToken();
        const baseAsset = "0x75faf114eafb1BDbe2F0316DF893fd58CE46AA4d";
        // "Borrow" by withdrawing the base asset from your account
        return this.contract.withdraw(baseAsset, amount);
    }
    /**
     * Repay borrowed amount by calling supply(baseAsset, amount).
     * This effectively offsets your negative base balance in Comet.
     * @param amount - The raw amount of base asset to repay
     */
    async repay(amount) {
        // const baseAsset: string = await this.contract.baseToken();
        const baseAsset = "0x75faf114eafb1BDbe2F0316DF893fd58CE46AA4d";
        return this.contract.supply(baseAsset, amount);
    }
}
exports.Comet = Comet;
