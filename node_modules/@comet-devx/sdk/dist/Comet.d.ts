import { ethers } from "ethers";
import { NETWORKS } from "./config/networks";
export declare class Comet {
    private contract;
    constructor(network: keyof typeof NETWORKS, signerOrProvider: ethers.Signer | ethers.Provider);
    sampleMethod(): string;
    /**
   * Supply an asset into Comet
   * @param asset - the ERC20 token address being supplied
   * @param amount - the raw amount (in smallest units) to supply
   * @returns a TransactionResponse from ethers
   */
    supply(asset: string, amount: ethers.BigNumberish): Promise<ethers.ContractTransaction>;
    /**
* Borrow the base asset from Comet by calling `withdraw(baseAsset, amount)`.
* You must have enough collateral to safely do this.
* @param amount - The raw amount of base asset to borrow (e.g. USDC in smallest units)
* @returns TransactionResponse
*/
    borrow(amount: ethers.BigNumberish): Promise<ethers.ContractTransaction>;
    /**
     * Repay borrowed amount by calling supply(baseAsset, amount).
     * This effectively offsets your negative base balance in Comet.
     * @param amount - The raw amount of base asset to repay
     */
    repay(amount: ethers.BigNumberish): Promise<ethers.ContractTransaction>;
}
